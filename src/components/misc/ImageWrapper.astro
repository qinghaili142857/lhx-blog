---
import path from "node:path";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
	fetchpriority?: "high" | "low" | "auto"; // 添加 fetchpriority 属性支持
}

import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";
import { siteConfig } from "../../config";

const { id, src, alt, position = "center", basePath = "/", fetchpriority } = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <check later>
let img;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

const imageClass = "w-full h-full object-cover image-content";
const imageStyle = `object-position: ${position}`;
---
<div id={id} class:list={[className, 'overflow-hidden relative image-wrapper']} style={`--theme-hue: ${siteConfig.themeColor.hue}`} data-image-wrapper>
    <!-- 加载条 -->
    <div class="loading-bar">
        <div class="loading-progress"></div>
    </div>
    
    <!-- 图片内容 -->
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} style={imageStyle} loading="eager" fetchpriority={fetchpriority} data-image-element />}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle} loading="eager" fetchpriority={fetchpriority} data-image-element />}
</div>

<style>
    .loading-bar {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 8rem;
        height: 0.25rem;
        background-color: rgba(156, 163, 175, 0.2);
        z-index: 10;
        border-radius: 9999px;
        overflow: hidden;
        transition: opacity 0.5s ease-out;
    }
    
    :global(.dark) .loading-bar {
        background-color: rgba(75, 85, 99, 0.3);
    }
    
    .loading-progress {
        height: 100%;
        width: 2rem;
        background-color: oklch(0.70 0.14 var(--theme-hue));
        animation: loading-progress 1.5s ease-in-out infinite;
        border-radius: 9999px;
    }
    
    @keyframes loading-progress {
        0% {
            transform: translateX(-100%);
        }
        100% {
            transform: translateX(400%);
        }
    }
    
    .image-content {
        opacity: 0;
        transition: opacity 0.5s ease-out, transform 0.3s ease-out;
    }
    
    .image-content.loaded {
        opacity: 1;
    }
    
    .loading-bar.hide {
        opacity: 0;
        pointer-events: none;
    }
    
    .image-wrapper:hover .image-content.loaded {
        transform: scale(1.05);
    }
</style>